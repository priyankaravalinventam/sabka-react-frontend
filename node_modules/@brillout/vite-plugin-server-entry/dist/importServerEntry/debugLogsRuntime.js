"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugLogsRuntimePost = exports.debugLogsRuntimePre = void 0;
const utils_1 = require("../shared/utils");
const debug_1 = require("../shared/debug");
function debugLogsRuntimePre(autoImporter) {
    if (!debug_1.DEBUG)
        return;
    (0, debug_1.logDebug)('DEBUG_LOGS_RUNTIME [begin]');
    try {
        (0, debug_1.logDebug)('process.platform', JSON.stringify(process.platform));
    }
    catch {
        (0, debug_1.logDebug)('process.platform', 'undefined');
    }
    // https://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js/35813135#35813135
    try {
        (0, debug_1.logDebug)('process.release', JSON.stringify(process.release));
    }
    catch {
        (0, debug_1.logDebug)('process.release', 'undefined');
    }
    // https://github.com/cloudflare/workers-sdk/issues/1481 - Feature Request: Detect whether code is being run in Cloudflare Workers (or Node.js)
    try {
        (0, debug_1.logDebug)('navigator', JSON.stringify(navigator));
    }
    catch {
        (0, debug_1.logDebug)('navigator', 'undefined');
    }
    (0, debug_1.logDebug)('cwd', (0, utils_1.getCwd)());
    (0, debug_1.logDebug)('importer.status', autoImporter.status);
    if (autoImporter.status === 'SET') {
        (0, debug_1.logDebug)('importer.paths.autoImporterFilePathOriginal', autoImporter.paths.autoImporterFilePathOriginal);
        (0, debug_1.logDebug)('importer.paths.autoImporterFileDirActual', autoImporter.paths.autoImporterFileDirActual);
        (0, debug_1.logDebug)('importer.paths.serverEntryFilePathRelative', autoImporter.paths.serverEntryFilePathRelative);
        (0, debug_1.logDebug)('importer.paths.serverEntryFilePathOriginal', autoImporter.paths.serverEntryFilePathOriginal);
        try {
            (0, debug_1.logDebug)('importer.paths.serverEntryFilePathResolved()', autoImporter.paths.serverEntryFilePathResolved());
        }
        catch (err) {
            (0, debug_1.logDebug)('importer.paths.serverEntryFilePathResolved() error:', err);
            (0, debug_1.logDebug)('importer.paths.serverEntryFilePathResolved()', 'ERRORED');
        }
    }
}
exports.debugLogsRuntimePre = debugLogsRuntimePre;
function debugLogsRuntimePost({ success, requireError, outDir, isOutsideOfCwd }) {
    if (!debug_1.DEBUG)
        return;
    (0, debug_1.logDebug)('requireError', requireError);
    (0, debug_1.logDebug)('outDir', outDir);
    (0, debug_1.logDebug)('isOutsideOfCwd', isOutsideOfCwd);
    (0, debug_1.logDebug)('success', success);
    (0, debug_1.logDebug)('DEBUG_LOGS_RUNTIME [end]');
}
exports.debugLogsRuntimePost = debugLogsRuntimePost;
